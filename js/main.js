// Generated by CoffeeScript 1.6.2
(function() {
  $(document).ready(function() {
    var allEndingsHaveBeenCompleted, allowIndefiniteRolls, baseFileForThisVisit, betAmount, clearLocalStorage, currentEndingLastLineNumber, documentHeight, endingFileForThisVisit, endingFiles, endingIndex, finishTable, firstRoll, handleFinalWinOrLoss, handleResults, haveAllEndingsBeenCompleted, hideInstructions, howToHandle, incrementlastEndingNumberSeen, indefiniteWorkerMode, instructionsTimeoutID, isGameOver, isWorkerPaused, lastEndingNumberSeen, lastNumWins, lastStorySeen, newTable, newTableIndefinitely, numBaseFiles, numRollsPlayed, numVisitsToSite, oddsOfRollingASix, oddsPayout, pauseWorker, playCrapsAndHandleResults, playIndefinitelyAtSuperHighSpeed, polyglot, queryString, queryStringValues, rollsPerTable, rollsUntilGameOver, runningTotal, saveToLocalStorage, sayNextLine, secondRoll, showInstructions, showInstructionsInAMoment, showTotal, startOver, storedObject, storyFileForThisVisit, storyFiles, storyIndex, tellStory, togglePause, totalWins, updateHeader, updateRunningTotal, whichChapter, wonAtFirstTable, wonFirstOrSecondRoll, worker, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

    betAmount = 5;
    oddsPayout = 30;
    rollsPerTable = 20;
    oddsOfRollingASix = "normal";
    rollsUntilGameOver = 500;
    numRollsPlayed = 0;
    isGameOver = false;
    allowIndefiniteRolls = false;
    numVisitsToSite = 0;
    lastStorySeen = 0;
    lastEndingNumberSeen = 0;
    currentEndingLastLineNumber = 0;
    haveAllEndingsBeenCompleted = false;
    runningTotal = 0;
    lastNumWins = 0;
    totalWins = 0;
    wonFirstOrSecondRoll = false;
    wonAtFirstTable = false;
    instructionsTimeoutID = 0;
    howToHandle = "";
    documentHeight = 0;
    indefiniteWorkerMode = "";
    isWorkerPaused = false;
    polyglot = new Polyglot;
    if (localStorage && localStorage.getItem("boxcars")) {
      storedObject = JSON.parse(localStorage.getItem("boxcars"));
      numVisitsToSite = storedObject.numVisitsToSite;
      lastStorySeen = storedObject.lastStorySeen;
      lastEndingNumberSeen = storedObject.lastEndingNumberSeen;
      haveAllEndingsBeenCompleted = storedObject.haveAllEndingsBeenCompleted;
    }
    saveToLocalStorage = function() {
      var objectToStore;

      if (!localStorage) {
        return;
      }
      objectToStore = {
        numVisitsToSite: numVisitsToSite,
        lastStorySeen: lastStorySeen,
        lastEndingNumberSeen: lastEndingNumberSeen,
        haveAllEndingsBeenCompleted: haveAllEndingsBeenCompleted
      };
      return localStorage.setItem("boxcars", JSON.stringify(objectToStore));
    };
    clearLocalStorage = function() {
      if (!localStorage) {
        return;
      }
      return localStorage.removeItem("boxcars");
    };
    handleResults = function(numRolls, numWins, rollResults, howToHandle) {
      var $div, currentDocumentHeight, losses, tableTotal, total, winnings, wonOrLost;

      numRolls = parseInt(numRolls);
      numWins = parseInt(numWins);
      numRollsPlayed += numRolls;
      lastNumWins = numWins;
      totalWins += numWins;
      losses = (numRolls - numWins) * betAmount;
      winnings = numWins * betAmount * oddsPayout;
      total = winnings - losses;
      updateRunningTotal(total);
      if (howToHandle === "firstRoll" || howToHandle === "newTable") {
        $div = $("<div>").appendTo("article");
      } else {
        $div = $("article div").last();
      }
      if (rollResults !== "") {
        $div.append(rollResults);
        if (howToHandle === "finishTable" || howToHandle === "newTable") {
          tableTotal = howToHandle === "finishTable" ? runningTotal : total;
          wonOrLost = formatWinOrLoss(tableTotal, "Won " + (formatCurrency(tableTotal)), "Lost " + (formatCurrency(-tableTotal)), "Broke even");
          $("<label>").text(wonOrLost.text).addClass(wonOrLost.result).appendTo($div);
        }
        currentDocumentHeight = $(document).height();
        if (documentHeight !== currentDocumentHeight) {
          documentHeight = currentDocumentHeight;
          $.scrollTo(currentDocumentHeight, 500);
        }
      }
      if (numRollsPlayed >= rollsUntilGameOver && !allowIndefiniteRolls) {
        isGameOver = true;
        pauseWorker();
        return handleFinalWinOrLoss();
      }
    };
    updateRunningTotal = function(newTotal) {
      var runningWinOrLoss, smallWinOrLossThreshold;

      runningTotal += newTotal;
      smallWinOrLossThreshold = (rollsUntilGameOver / 500) * oddsPayout * betAmount;
      runningWinOrLoss = formatWinOrLoss(runningTotal, "You've won a total of " + (formatCurrency(runningTotal)), "You've lost a total of " + (formatCurrency(-runningTotal)), "You're even", smallWinOrLossThreshold);
      return $("footer").text(runningWinOrLoss.text).removeClass().addClass(runningWinOrLoss.result);
    };
    handleFinalWinOrLoss = function() {
      var finalWinOrLoss, smallWinOrLossThreshold;

      smallWinOrLossThreshold = (rollsUntilGameOver / 500) * oddsPayout * betAmount;
      finalWinOrLoss = formatWinOrLoss(runningTotal, "You won! After " + numRollsPlayed + " rolls, you're up a total of " + (formatCurrency(runningTotal)) + ".", "You lost. After " + numRollsPlayed + " rolls, you're down a total of " + (formatCurrency(-runningTotal)) + ".", "Wow, you broke even. After " + numRollsPlayed + " rolls. How about that.", smallWinOrLossThreshold, "Not bad. You won a little bit of money. After " + numRollsPlayed + " rolls, you're up a total of " + (formatCurrency(runningTotal)) + ".", "Hey, it's not a disgrace. After " + numRollsPlayed + " rolls, you're down a total of " + (formatCurrency(-runningTotal)) + ".");
      return $("header").text(finalWinOrLoss.text).removeClass().addClass(finalWinOrLoss.result);
    };
    updateHeader = function(text) {
      return $("header").html(text).removeClass();
    };
    showInstructionsInAMoment = function() {
      return instructionsTimeoutID = setTimeout(showInstructions, 3000);
    };
    showInstructions = function() {
      return $(".instructions").fadeIn(500);
    };
    hideInstructions = function() {
      clearTimeout(instructionsTimeoutID);
      return $(".instructions").fadeOut(250);
    };
    showTotal = function() {
      return $("footer").delay(1000).fadeIn(600);
    };
    worker = new Worker("js/playCrapsWorker.js");
    worker.addEventListener("message", function(e) {
      return handleResults(e.data.numRolls, e.data.numWins, e.data.rollResults, howToHandle);
    }, false);
    playCrapsAndHandleResults = function(numRolls) {
      var results;

      results = playCraps(numRolls, true, oddsOfRollingASix);
      return handleResults(results.numRolls, results.numWins, results.rollResults, howToHandle);
    };
    firstRoll = function() {
      howToHandle = "firstRoll";
      return playCrapsAndHandleResults(1);
    };
    secondRoll = function() {
      howToHandle = "secondRoll";
      return playCrapsAndHandleResults(1);
    };
    finishTable = function() {
      howToHandle = "finishTable";
      return playCrapsAndHandleResults(rollsPerTable - 2);
    };
    newTable = function() {
      howToHandle = "newTable";
      return playCrapsAndHandleResults(rollsPerTable);
    };
    newTableIndefinitely = function(fastOrSlow) {
      howToHandle = "newTable";
      indefiniteWorkerMode = "newTable" + fastOrSlow.toTitleCase();
      return worker.postMessage({
        command: "playCraps",
        numRolls: rollsPerTable,
        returnAllRolls: true,
        oddsOfRollingASix: oddsOfRollingASix,
        delay: fastOrSlow === "fast" ? 100 : 1000
      });
    };
    playIndefinitelyAtSuperHighSpeed = function() {
      howToHandle = "playIndefinitelyAtSuperHighSpeed";
      indefiniteWorkerMode = "playIndefinitelyAtSuperHighSpeed";
      return worker.postMessage({
        command: "playCraps",
        numRolls: 100,
        returnAllRolls: false,
        oddsOfRollingASix: oddsOfRollingASix,
        delay: 10
      });
    };
    pauseWorker = function() {
      isWorkerPaused = true;
      return worker.postMessage({
        command: "pause"
      });
    };
    togglePause = function() {
      if (indefiniteWorkerMode === "" || isGameOver) {
        return;
      }
      if (isWorkerPaused) {
        isWorkerPaused = false;
        if (indefiniteWorkerMode === "newTableSlow") {
          return newTableIndefinitely("slow");
        } else if (indefiniteWorkerMode === "newTableFast") {
          return newTableIndefinitely("fast");
        } else {
          return playIndefinitelyAtSuperHighSpeed();
        }
      } else {
        return pauseWorker();
      }
    };
    $(document).on("keyup", function(e) {
      if (e.keyCode === 27) {
        return togglePause();
      }
    });
    whichChapter = 1;
    tellStory = function() {
      var endingPartNumber;

      if (whichChapter > 10 && !isGameOver && !allowIndefiniteRolls) {
        return;
      }
      if (isGameOver && whichChapter === 10) {
        whichChapter = 12;
      }
      if (whichChapter === 11 && !allowIndefiniteRolls) {
        whichChapter = 12;
      }
      switch (whichChapter) {
        case 1:
          sayNextLine("intro.1");
          showInstructionsInAMoment();
          break;
        case 2:
          sayNextLine("intro.2", {
            betAmount: formatCurrency(betAmount)
          });
          hideInstructions();
          break;
        case 3:
          sayNextLine("intro.3");
          break;
        case 4:
          sayNextLine("intro.4");
          break;
        case 5:
          firstRoll();
          if (lastNumWins === 1) {
            wonFirstOrSecondRoll = true;
            sayNextLine("firstRoll.won", {
              betAmount: formatCurrency(betAmount),
              oneBetWinnings: formatCurrency(betAmount * oddsPayout)
            });
          } else {
            sayNextLine("firstRoll.lost");
          }
          break;
        case 6:
          secondRoll();
          if (lastNumWins === 1) {
            wonFirstOrSecondRoll = true;
            if (totalWins === 2) {
              sayNextLine("secondRoll.wonBoth");
            } else {
              sayNextLine("secondRoll.wonSecondLostFirst");
            }
          } else {
            if (totalWins === 1) {
              sayNextLine("secondRoll.wonFirstLostSecond");
            } else {
              sayNextLine("secondRoll.lostBoth");
            }
          }
          break;
        case 7:
          finishTable();
          switch (false) {
            case !(wonFirstOrSecondRoll && lastNumWins > 0):
              sayNextLine("firstTable.wonFirstRollsAndWonAgain");
              break;
            case !(wonFirstOrSecondRoll && lastNumWins === 0):
              sayNextLine("firstTable.wonFirstRollsButLostTheRest");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins > 1):
              sayNextLine("firstTable.lostFirstRollsButWonMoreThanOne");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins === 1):
              sayNextLine("firstTable.lostFirstRollsButWonOne");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins === 0):
              sayNextLine("firstTable.lostAllRolls");
          }
          wonAtFirstTable = totalWins > 0;
          showTotal();
          break;
        case 8:
          newTable();
          switch (false) {
            case !(wonAtFirstTable && lastNumWins > 0):
              sayNextLine("secondTable.wonBoth");
              break;
            case !(wonAtFirstTable && lastNumWins === 0):
              sayNextLine("secondTable.wonFirstLostSecond");
              break;
            case !(!wonAtFirstTable && lastNumWins > 0):
              sayNextLine("secondTable.wonSecondLostFirst");
              break;
            case !(!wonAtFirstTable && lastNumWins === 0):
              sayNextLine("secondTable.lostBoth");
          }
          break;
        case 9:
          newTableIndefinitely("slow");
          sayNextLine("keepPlaying.tablesSlow");
          break;
        case 10:
          newTableIndefinitely("fast");
          sayNextLine("keepPlaying.tablesFast");
          break;
        case 11:
          playIndefinitelyAtSuperHighSpeed();
          sayNextLine("keepPlaying.indefinitelyFast");
          break;
        default:
          endingPartNumber = whichChapter - 11;
          if (endingPartNumber <= currentEndingLastLineNumber) {
            sayNextLine("ending." + endingPartNumber);
          }
          if (endingPartNumber === 2) {
            incrementlastEndingNumberSeen();
          }
          if (endingPartNumber === currentEndingLastLineNumber && endingFileForThisVisit === "quirky-ending") {
            allEndingsHaveBeenCompleted();
          }
      }
      return whichChapter++;
    };
    sayNextLine = function(storyKey, extraValues) {
      extraValues = extraValues != null ? extraValues : {};
      return updateHeader(polyglot.t(storyKey, extraValues));
    };
    $(document).on("keyup", function(e) {
      var _ref;

      if ((_ref = e.keyCode) === 13 || _ref === 39 || _ref === 32) {
        return tellStory();
      }
    });
    $(document).on("click", "header", tellStory);
    if (location.search) {
      queryString = location.search.indexOf("?") === 0 ? location.search.substring(1) : location.search;
      queryStringValues = $.deserialize(queryString);
      betAmount = (_ref = queryStringValues.betAmount) != null ? _ref : betAmount;
      oddsPayout = (_ref1 = queryStringValues.oddsPayout) != null ? _ref1 : oddsPayout;
      rollsPerTable = (_ref2 = queryStringValues.rollsPerTable) != null ? _ref2 : rollsPerTable;
      rollsUntilGameOver = (_ref3 = queryStringValues.rollsUntilGameOver) != null ? _ref3 : rollsUntilGameOver;
      oddsOfRollingASix = (_ref4 = queryStringValues.oddsOfRollingASix) != null ? _ref4 : oddsOfRollingASix;
      allowIndefiniteRolls = (_ref5 = queryStringValues.playIndefinitelyAtSuperHighSpeed) != null ? _ref5 : false;
      if (allowIndefiniteRolls === !false) {
        allowIndefiniteRolls = true;
      }
      startOver = (_ref6 = queryStringValues.startOver) != null ? _ref6 : false;
      if (startOver) {
        clearLocalStorage();
        location.replace(location.protocol + "//" + location.hostname + location.pathname);
        return;
      }
    }
    numVisitsToSite++;
    numBaseFiles = 2;
    baseFileForThisVisit = "base" + (((numVisitsToSite - 1) % numBaseFiles) + 1);
    storyFiles = ["atlantic-city", "vegas", "chumash", "back-to-vegas", "river-boat", "online", "gambling-problem", "no-more"];
    if (numVisitsToSite <= storyFiles.length) {
      storyIndex = (numVisitsToSite - 1) % storyFiles.length;
    } else {
      storyIndex = lastStorySeen;
      while (storyIndex === lastStorySeen) {
        storyIndex = Math.floor(Math.random() * storyFiles.length);
      }
    }
    lastStorySeen = storyIndex;
    storyFileForThisVisit = storyFiles[storyIndex];
    endingIndex = lastEndingNumberSeen;
    endingFiles = ["first-ending", "change-num-rolls-per-table", "change-bet-amount", "change-roll-limit", "change-the-odds", "quirky-ending", "final-ending-all-options"];
    if (lastEndingNumberSeen >= endingFiles.length - 1) {
      if (haveAllEndingsBeenCompleted) {
        endingIndex = endingFiles.length - 1;
      } else {
        endingIndex = Math.floor(Math.random() * (endingFiles.length - 1));
      }
    }
    endingFileForThisVisit = endingFiles[endingIndex];
    incrementlastEndingNumberSeen = function() {
      lastEndingNumberSeen++;
      return saveToLocalStorage();
    };
    allEndingsHaveBeenCompleted = function() {
      haveAllEndingsBeenCompleted = true;
      return saveToLocalStorage();
    };
    saveToLocalStorage();
    return $.getJSON("story/bases/" + baseFileForThisVisit + ".json", function(data) {
      polyglot.extend(data);
      return $.getJSON("story/stories/" + storyFileForThisVisit + ".json", function(data) {
        polyglot.extend(data);
        return $.getJSON("story/endings/" + endingFileForThisVisit + ".json", function(data) {
          polyglot.extend(data);
          currentEndingLastLineNumber = data.lastLineNumber;
          return tellStory();
        });
      });
    });
  });

}).call(this);
