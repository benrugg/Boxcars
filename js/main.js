// Generated by CoffeeScript 1.6.2
(function() {
  $(document).ready(function() {
    var betAmount, finishTable, firstRoll, handleResults, howToHandle, isWorkerPaused, isWorkerRunningIndefinitely, justKeepPlaying, lastNumWins, newTable, newTableIndefinitely, oddsPayout, pauseWorker, playCrapsAndHandleResults, polyglot, rollsPerTable, runningTotal, secondRoll, showTotal, tellNextLine, tellStory, totalWins, updateHeader, updateRunningTotal, whichChapter, wonAtFirstTable, wonFirstOrSecondRoll, worker;

    betAmount = 5;
    oddsPayout = 30;
    rollsPerTable = 20;
    runningTotal = 0;
    lastNumWins = 0;
    totalWins = 0;
    wonFirstOrSecondRoll = false;
    wonAtFirstTable = false;
    howToHandle = "";
    isWorkerRunningIndefinitely = false;
    isWorkerPaused = false;
    polyglot = new Polyglot;
    handleResults = function(numRolls, numWins, rollResults, howToHandle) {
      var $div, losses, tableTotal, total, winnings, wonOrLost;

      lastNumWins = numWins;
      totalWins += numWins;
      losses = (numRolls - numWins) * betAmount;
      winnings = numWins * betAmount * oddsPayout;
      total = winnings - losses;
      updateRunningTotal(total);
      if (howToHandle === "firstRoll" || howToHandle === "newTable") {
        $div = $("<div>").appendTo("article");
      } else {
        $div = $("article div").last();
      }
      if (rollResults !== "") {
        $div.append(rollResults);
        if (howToHandle === "finishTable" || howToHandle === "newTable") {
          tableTotal = howToHandle === "finishTable" ? runningTotal : total;
          wonOrLost = formatWinOrLoss(tableTotal, "Won " + (formatCurrency(tableTotal)), "Lost " + (formatCurrency(-tableTotal)), "Broke even");
          return $("<label>").text(wonOrLost.text).addClass(wonOrLost.result).appendTo($div);
        }
      }
    };
    updateHeader = function(text) {
      return $("header").text(text);
    };
    showTotal = function() {
      return $("footer").delay(1000).fadeIn(600);
    };
    worker = new Worker("js/playCrapsWorker.js");
    worker.addEventListener("message", function(e) {
      return handleResults(e.data.numRolls, e.data.numWins, e.data.rollResults, howToHandle);
    }, false);
    playCrapsAndHandleResults = function(numRolls) {
      var results;

      results = playCraps(numRolls, true);
      return handleResults(results.numRolls, results.numWins, results.rollResults, howToHandle);
    };
    firstRoll = function() {
      howToHandle = "firstRoll";
      return playCrapsAndHandleResults(1);
    };
    secondRoll = function() {
      howToHandle = "secondRoll";
      return playCrapsAndHandleResults(1);
    };
    finishTable = function() {
      howToHandle = "finishTable";
      return playCrapsAndHandleResults(rollsPerTable - 2);
    };
    newTable = function() {
      howToHandle = "newTable";
      return playCrapsAndHandleResults(rollsPerTable);
    };
    newTableIndefinitely = function(fastOrSlow) {
      howToHandle = "newTable";
      return worker.postMessage({
        command: "playCraps",
        numRolls: rollsPerTable,
        returnAllRolls: true,
        delay: fastOrSlow === "fast" ? 100 : 1000
      });
    };
    justKeepPlaying = function() {
      howToHandle = "justKeepPlaying";
      isWorkerPaused = false;
      isWorkerRunningIndefinitely = true;
      return worker.postMessage({
        command: "playCraps",
        numRolls: 1,
        returnAllRolls: false,
        delay: 10
      });
    };
    pauseWorker = function() {
      isWorkerPaused = true;
      isWorkerRunningIndefinitely = false;
      return worker.postMessage({
        command: "pause"
      });
    };
    $(document).on("keyup", function(e) {
      if (e.keyCode === 27) {
        if (isWorkerRunningIndefinitely) {
          return pauseWorker();
        } else if (isWorkerPaused) {
          return justKeepPlaying();
        }
      }
    });
    updateRunningTotal = function(newTotal) {
      var runningWinOrLoss;

      runningTotal += newTotal;
      runningWinOrLoss = formatWinOrLoss(runningTotal, "You've won a total of " + (formatCurrency(runningTotal)), "You've lost a total of " + (formatCurrency(-runningTotal)), "You're even");
      return $("footer").text(runningWinOrLoss.text).removeClass().addClass(runningWinOrLoss.result);
    };
    whichChapter = 1;
    tellStory = function() {
      switch (whichChapter) {
        case 1:
          tellNextLine("intro.1");
          break;
        case 2:
          tellNextLine("intro.2", {
            betAmount: formatCurrency(betAmount)
          });
          break;
        case 3:
          tellNextLine("intro.3");
          break;
        case 4:
          tellNextLine("intro.4");
          break;
        case 5:
          firstRoll();
          if (lastNumWins === 1) {
            wonFirstOrSecondRoll = true;
            tellNextLine("firstRoll.won", {
              betAmount: formatCurrency(betAmount),
              oneBetWinnings: formatCurrency(betAmount * oddsPayout)
            });
          } else {
            tellNextLine("firstRoll.lost");
          }
          break;
        case 6:
          secondRoll();
          if (lastNumWins === 1) {
            wonFirstOrSecondRoll = true;
            if (totalWins === 2) {
              tellNextLine("secondRoll.wonBoth");
            } else {
              tellNextLine("secondRoll.wonSecondLostFirst");
            }
          } else {
            if (totalWins === 1) {
              tellNextLine("secondRoll.wonFirstLostSecond");
            } else {
              tellNextLine("secondRoll.lostBoth");
            }
          }
          break;
        case 7:
          finishTable();
          switch (false) {
            case !(wonFirstOrSecondRoll && lastNumWins > 0):
              tellNextLine("firstTable.wonFirstRollsAndWonAgain");
              break;
            case !(wonFirstOrSecondRoll && lastNumWins === 0):
              tellNextLine("firstTable.wonFirstRollsButLostTheRest");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins > 1):
              tellNextLine("firstTable.lostFirstRollsButWonMoreThanOne");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins === 1):
              tellNextLine("firstTable.lostFirstRollsButWonOne");
              break;
            case !(!wonFirstOrSecondRoll && lastNumWins === 0):
              tellNextLine("firstTable.lostAllRolls");
          }
          wonAtFirstTable = totalWins > 0;
          showTotal();
          break;
        case 8:
          newTable();
          switch (false) {
            case !(wonAtFirstTable && lastNumWins > 0):
              tellNextLine("secondTable.wonBoth");
              break;
            case !(wonAtFirstTable && lastNumWins === 0):
              tellNextLine("secondTable.wonFirstLostSecond");
              break;
            case !(!wonAtFirstTable && lastNumWins > 0):
              tellNextLine("secondTable.wonSecondLostFirst");
              break;
            case !(!wonAtFirstTable && lastNumWins === 0):
              tellNextLine("secondTable.lostBoth");
          }
          break;
        case 9:
          newTableIndefinitely("slow");
          tellNextLine("keepPlaying.tablesSlow");
          break;
        case 10:
          newTableIndefinitely("fast");
          tellNextLine("keepPlaying.tablesFast");
          break;
        case 11:
          justKeepPlaying();
          tellNextLine("keepPlaying.rolls");
      }
      return whichChapter++;
    };
    tellNextLine = function(storyKey, extraValues) {
      extraValues = extraValues != null ? extraValues : {};
      return updateHeader(polyglot.t(storyKey, extraValues));
    };
    $(document).on("keyup", function(e) {
      var _ref;

      if ((_ref = e.keyCode) === 13 || _ref === 39 || _ref === 32) {
        return tellStory();
      }
    });
    $(document).on("click", "header", tellStory);
    return $.getJSON("story/vegas.json", function(data) {
      polyglot.extend(data);
      return tellStory();
    });
  });

}).call(this);
